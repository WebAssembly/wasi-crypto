;;; Symmetric Batch Operations
(module $wasi_ephemeral_crypto_symmetric_batch
    (use * from $wasi_ephemeral_crypto_common)

    ;;; An output buffer
    (typename $output (out-buffer u8))
    (typename $output_len $size)

    ;;; A non-mutable data buffer
    (typename $data (in-buffer u8))
    (typename $data_len $size)

    ;;; An raw tag buffer
    (typename $raw_tag (in-buffer u8))
    (typename $raw_tag_len $size)

    ;;; A tuple of parameters for an encryption operation.
    (typename $encrypt_params (tuple $symmetric_state $output $output_len $data $data_len))

    ;;; A tuple of parameters for a detached decryption operation.
    (typename $decrypt_detached_params (tuple $symmetric_state $output $output_len $data $data_len $raw_tag $raw_tag_len))

    (typename $encrypt_result (tuple $size $crypto_errno))
    (typename $batch_encrypt_results (list $encrypt_result))

    (typename $encrypt_detached_result (tuple $symmetric_tag $crypto_errno))
    (typename $batch_encrypt_detached_results (list $encrypt_detached_result))

    (typename $squeeze_params (tuple $symmetric_state $data $data_len))
    (typename $squeeze_results (list $crypto_errno))

    ;;; Batch of operations to squeeze bytes from the state.
    ;;;
    ;;; - **Hash functions:** this tries to output an `out_len` bytes digest from the absorbed data. The hash function output will be truncated if necessary. If the requested size is too large, the `invalid_len` error code is returned.
    ;;; - **Key derivation functions:** : outputs an arbitrary-long derived key.
    ;;; - **RNGs, DRBGs, stream ciphers:**: outputs arbitrary-long data.
    ;;; - **Stateful hash objects, permutation-based constructions:** squeeze.
    ;;;
    ;;; Other kinds of algorithms may return `invalid_operation` instead.
    ;;;
    ;;; For password-stretching functions, the function may return `in_progress`.
    ;;; In that case, the guest should retry with the same parameters until the function completes.
    (@interface func (export "batch_symmetric_state_squeeze")
        (param $params (list $squeeze_params))
        (result $error (expected $squeeze_results (error $crypto_errno)))
    )

    ;;; Perform a batch of symmetric encrypt operations.
    ;;;
    ;;; This is a batch version of the symmetric_state_encrypto operation and
    ;;; is an extension of the wasi_empemeral_crypto_symmetric module.
    ;;;
    ;;; Each entry in the batch corresponds to an individual encrypt operation.
    ;;; The parameters associated with each encrypt operation are grouped into a
    ;;; tuple.
    ;;;
    ;;; If the entire batch could not be processed an error code of type
    ;;; $crypto_errno is returned. If part of the batch was successfully
    ;;; processed and part (one or more) resulted in a failure, each result
    ;;; is a pair of an error code and a size. The size is only valid
    ;;; if the error code indicates success.
    ;;;
    ;;; The size corresponds to the actual size of the ciphertext and the tag
    ;;; in the ouput buffer.
    ;;;
    ;;; Example usage:
    ;;;
    ;;; ```rust
    ;;; let mut batch = Vec::new();
    ;;;
    ;;; let state_handle = ctx.symmetric_state_open("AES-256-GCM", Some(key_handle1), Some(options_handle1))?;
    ;;; let mut ciphertext = vec![0u8; message.len() + ctx.symmetric_state_max_tag_len(state_handle)?];
    ;;; batch.push((batch, state_handle, ciphertext, ciphertext.len(), message, message.len()));
    ;;;
    ;;; let state_handle = ctx.symmetric_state_open("AES-256-GCM", Some(key_handle2), Some(options_handle2))?;
    ;;; let mut ciphertext = vec![0u8; message2.len() + ctx.symmetric_state_max_tag_len(state_handle)?];
    ;;; batch.push((batch, state_handle, ciphertext, ciphertext.len(), message2, message2.len()));
    ;;;
    ;;; let results = ctx.batch_symmetric_state_encrypt(batch)?;
    ;;; ```
    (@interface func (export "batch_symmetric_state_encrypt")
        (param $batch (list $encrypt_params))
        (result $error (expected $batch_encrypt_results (error $crypto_errno)))
    )

    ;;; Perform a batch of symmetric encrypt operations with detached tags.
    (@interface func (export "batch_symmetric_state_encrypt_detached")
        (param $batch (list $encrypt_params))
        (result $error (expected $batch_encrypt_detached_results (error $crypto_errno)))
    )

    ;;; TODO: Replace the encrypt_params type with something more generic that
    ;;; that works for both encrypt and decrypt.
    (@interface func (export "batch_symmetric_state_decrypt")
        (param $batch (list $encrypt_params))
        (result $error (expected $batch_encrypt_results (error $crypto_errno)))
    )

    ;;; TODO: Replace the encrypt_params type with something more generic that
    ;;; that works for both encrypt and decrypt.
    (@interface func (export "batch_symmetric_state_decrypt_detached")
        (param $batch (list $decrypt_detached_params))
        (result $error (expected $batch_encrypt_results (error $crypto_errno)))
    )

)